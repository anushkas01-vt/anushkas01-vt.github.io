[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS5805",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "codeFiles/AnomalyDetection.html",
    "href": "codeFiles/AnomalyDetection.html",
    "title": "CS5805",
    "section": "",
    "text": "from ucimlrepo import fetch_ucirepo \nimport pandas as pd\n  \n# fetch dataset \nionosphere = fetch_ucirepo(id=52) \n  \n# data (as pandas dataframes) \nX = ionosphere.data.features \ny = ionosphere.data.targets \n  \n# metadata \nprint(ionosphere.metadata) \n  \n# variable information \nprint(ionosphere.variables) \n\n{'uci_id': 52, 'name': 'Ionosphere', 'repository_url': 'https://archive.ics.uci.edu/dataset/52/ionosphere', 'data_url': 'https://archive.ics.uci.edu/static/public/52/data.csv', 'abstract': 'Classification of radar returns from the ionosphere', 'area': 'Physics and Chemistry', 'tasks': ['Classification'], 'characteristics': ['Multivariate'], 'num_instances': 351, 'num_features': 34, 'feature_types': ['Integer', 'Real'], 'demographics': [], 'target_col': ['Class'], 'index_col': None, 'has_missing_values': 'no', 'missing_values_symbol': None, 'year_of_dataset_creation': 1989, 'last_updated': 'Sun Jan 01 1989', 'dataset_doi': '10.24432/C5W01B', 'creators': ['V. Sigillito', 'S. Wing', 'L. Hutton', 'K. Baker'], 'intro_paper': None, 'additional_info': {'summary': 'This radar data was collected by a system in Goose Bay, Labrador.  This system consists of a phased array of 16 high-frequency antennas with a total transmitted power on the order of 6.4 kilowatts.  See the paper for more details.  The targets were free electrons in the ionosphere. \"Good\" radar returns are those showing evidence of some type of structure in the ionosphere.  \"Bad\" returns are those that do not; their signals pass through the ionosphere.  \\r\\n\\r\\nReceived signals were processed using an autocorrelation function whose arguments are the time of a pulse and the pulse number.  There were 17 pulse numbers for the Goose Bay system.  Instances in this databse are described by 2 attributes per pulse number, corresponding to the complex values returned by the function resulting from the complex electromagnetic signal.', 'purpose': None, 'funded_by': None, 'instances_represent': None, 'recommended_data_splits': None, 'sensitive_data': None, 'preprocessing_description': None, 'variable_info': '-- All 34 are continuous\\r\\n-- The 35th attribute is either \"good\" or \"bad\" according to the definition summarized above.  This is a binary classification task.\\r\\n', 'citation': None}}\n           name     role         type demographic description units  \\\n0    Attribute1  Feature   Continuous        None        None  None   \n1    Attribute2  Feature   Continuous        None        None  None   \n2    Attribute3  Feature   Continuous        None        None  None   \n3    Attribute4  Feature   Continuous        None        None  None   \n4    Attribute5  Feature   Continuous        None        None  None   \n5    Attribute6  Feature   Continuous        None        None  None   \n6    Attribute7  Feature   Continuous        None        None  None   \n7    Attribute8  Feature   Continuous        None        None  None   \n8    Attribute9  Feature   Continuous        None        None  None   \n9   Attribute10  Feature   Continuous        None        None  None   \n10  Attribute11  Feature   Continuous        None        None  None   \n11  Attribute12  Feature   Continuous        None        None  None   \n12  Attribute13  Feature   Continuous        None        None  None   \n13  Attribute14  Feature   Continuous        None        None  None   \n14  Attribute15  Feature   Continuous        None        None  None   \n15  Attribute16  Feature   Continuous        None        None  None   \n16  Attribute17  Feature   Continuous        None        None  None   \n17  Attribute18  Feature   Continuous        None        None  None   \n18  Attribute19  Feature   Continuous        None        None  None   \n19  Attribute20  Feature   Continuous        None        None  None   \n20  Attribute21  Feature   Continuous        None        None  None   \n21  Attribute22  Feature   Continuous        None        None  None   \n22  Attribute23  Feature   Continuous        None        None  None   \n23  Attribute24  Feature   Continuous        None        None  None   \n24  Attribute25  Feature   Continuous        None        None  None   \n25  Attribute26  Feature   Continuous        None        None  None   \n26  Attribute27  Feature   Continuous        None        None  None   \n27  Attribute28  Feature   Continuous        None        None  None   \n28  Attribute29  Feature   Continuous        None        None  None   \n29  Attribute30  Feature   Continuous        None        None  None   \n30  Attribute31  Feature   Continuous        None        None  None   \n31  Attribute32  Feature   Continuous        None        None  None   \n32  Attribute33  Feature   Continuous        None        None  None   \n33  Attribute34  Feature   Continuous        None        None  None   \n34        Class   Target  Categorical        None        None  None   \n\n   missing_values  \n0              no  \n1              no  \n2              no  \n3              no  \n4              no  \n5              no  \n6              no  \n7              no  \n8              no  \n9              no  \n10             no  \n11             no  \n12             no  \n13             no  \n14             no  \n15             no  \n16             no  \n17             no  \n18             no  \n19             no  \n20             no  \n21             no  \n22             no  \n23             no  \n24             no  \n25             no  \n26             no  \n27             no  \n28             no  \n29             no  \n30             no  \n31             no  \n32             no  \n33             no  \n34             no  \n\n\n\nprint(len(X.columns))\n\n34\n\n\n\nX.head(5)\n\n\n\n\n\n\n\n\nAttribute1\nAttribute2\nAttribute3\nAttribute4\nAttribute5\nAttribute6\nAttribute7\nAttribute8\nAttribute9\nAttribute10\n...\nAttribute25\nAttribute26\nAttribute27\nAttribute28\nAttribute29\nAttribute30\nAttribute31\nAttribute32\nAttribute33\nAttribute34\n\n\n\n\n0\n1\n0\n0.99539\n-0.05889\n0.85243\n0.02306\n0.83398\n-0.37708\n1.00000\n0.03760\n...\n0.56811\n-0.51171\n0.41078\n-0.46168\n0.21266\n-0.34090\n0.42267\n-0.54487\n0.18641\n-0.45300\n\n\n1\n1\n0\n1.00000\n-0.18829\n0.93035\n-0.36156\n-0.10868\n-0.93597\n1.00000\n-0.04549\n...\n-0.20332\n-0.26569\n-0.20468\n-0.18401\n-0.19040\n-0.11593\n-0.16626\n-0.06288\n-0.13738\n-0.02447\n\n\n2\n1\n0\n1.00000\n-0.03365\n1.00000\n0.00485\n1.00000\n-0.12062\n0.88965\n0.01198\n...\n0.57528\n-0.40220\n0.58984\n-0.22145\n0.43100\n-0.17365\n0.60436\n-0.24180\n0.56045\n-0.38238\n\n\n3\n1\n0\n1.00000\n-0.45161\n1.00000\n1.00000\n0.71216\n-1.00000\n0.00000\n0.00000\n...\n1.00000\n0.90695\n0.51613\n1.00000\n1.00000\n-0.20099\n0.25682\n1.00000\n-0.32382\n1.00000\n\n\n4\n1\n0\n1.00000\n-0.02401\n0.94140\n0.06531\n0.92106\n-0.23255\n0.77152\n-0.16399\n...\n0.03286\n-0.65158\n0.13290\n-0.53206\n0.02431\n-0.62197\n-0.05707\n-0.59573\n-0.04608\n-0.65697\n\n\n\n\n5 rows × 34 columns\n\n\n\n\nfrom sklearn.decomposition import PCA\n\n#define PCA model to use\npca = PCA(n_components=len(X.columns))\n\n#fit PCA model to data\npca_fit = pca.fit(X)\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nPC_values = np.arange(pca.n_components_) + 1\nplt.plot(PC_values, pca.explained_variance_ratio_, 'o-', linewidth=2, color='blue')\nplt.title('Scree Plot')\nplt.xlabel('Principal Component')\nplt.ylabel('Variance Explained')\nplt.show()\n\nprint(pca.explained_variance_ratio_)\n\n\n\n\n[3.13442567e-01 1.22715916e-01 7.47531588e-02 6.93713827e-02\n 4.87451555e-02 3.67628972e-02 3.00194104e-02 2.87417744e-02\n 2.70258301e-02 2.25412044e-02 2.06320031e-02 1.83866023e-02\n 1.74260667e-02 1.64547193e-02 1.44493400e-02 1.39720397e-02\n 1.28249614e-02 1.18505458e-02 1.13257238e-02 1.08961135e-02\n 1.00825974e-02 9.50662790e-03 7.79732167e-03 7.23070868e-03\n 6.96611126e-03 6.21700612e-03 5.76370177e-03 5.19643141e-03\n 4.86322151e-03 4.29335970e-03 4.07318815e-03 3.36833665e-03\n 2.30397592e-03 6.18156468e-32]\n\n\n\nfrom sklearn.neighbors import NearestNeighbors\nnbrs = NearestNeighbors(n_neighbors=2, metric='cosine').fit(X)\ndistances, indices = nbrs.kneighbors(X)\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\n\n# Plot the k-distance graph\nplt.plot(distances)\nplt.title('k-distance plot')\nplt.xlabel('Data Point Index')\nplt.ylabel('Distance to k-th nearest neighbor')\n\n\n# Find the optimal epsilon (knee point)\nknee_point_index = np.argmax(np.diff(distances))  # Find the index with the maximum difference in distances\nepsilon = distances[knee_point_index]\nplt.axvline(x=knee_point_index, color='r', linestyle='--', label=f'Optimal Epsilon = {epsilon:.2f}')\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nfrom sklearn.cluster import DBSCAN\n\nprincipalComponents = PCA(n_components=3).fit_transform(X)\n\nprincipalDf = pd.DataFrame(data = principalComponents)\ncluster = DBSCAN(eps=epsilon).fit(principalDf)\n\n\nprincipalDf.columns=['PCA1','PCA2','PCA3']\nprincipalDf\n\n\n\n\n\n\n\n\nPCA1\nPCA2\nPCA3\n\n\n\n\n0\n-0.859333\n-0.961407\n-0.586082\n\n\n1\n0.765524\n-1.062714\n-1.397339\n\n\n2\n-1.116817\n-0.392256\n0.007988\n\n\n3\n0.981679\n0.590445\n0.478505\n\n\n4\n0.132848\n-0.788272\n-0.714253\n\n\n...\n...\n...\n...\n\n\n346\n-1.812768\n-0.085462\n0.222245\n\n\n347\n-2.047168\n0.064722\n0.374502\n\n\n348\n-2.009686\n0.007021\n0.345604\n\n\n349\n-1.878506\n-0.258263\n0.279973\n\n\n350\n-1.548783\n-0.187526\n0.217571\n\n\n\n\n351 rows × 3 columns\n\n\n\n\nimport collections\nprint(collections.Counter(cluster.labels_))\n\nCounter({0: 251, -1: 50, 1: 32, 2: 18})\n\n\n\n\n# clustering = DBSCAN().fit(project2D)\nimport seaborn as sns\nimport numpy as np\n\n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import ListedColormap\n\n\n# axes instance\nfig = plt.figure(figsize=(6,6))\nax = Axes3D(fig, auto_add_to_figure=False)\nfig.add_axes(ax)\n\n# get colormap from seaborn\ncmap = plt.cm.get_cmap('viridis', 2) \nx = principalDf['PCA1']\ny = principalDf['PCA2']\nz = principalDf['PCA3']\n\n# plot\nax.scatter(x, y, z, s=40, c=np.array(cluster.labels_)&gt;-1, marker='o', cmap=cmap, alpha=1)\n\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()\n# legend\n#plt.legend(*sc.legend_elements(), bbox_to_anchor=(1.05, 1), loc=2)\n\nC:\\Users\\Anu2001\\AppData\\Local\\Temp\\ipykernel_2712\\188791831.py:16: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  cmap = plt.cm.get_cmap('viridis', 2)\n\n\n\n\n\n\ndef plot_dbscan(dbscan, X, size, show_xlabels=True, show_ylabels=True):\n    bool_labels = dbscan.labels_&gt;-1\n    core_mask = np.zeros_like(bool_labels, dtype=bool)\n    core_mask[dbscan.core_sample_indices_] = True\n    anomalies_mask = bool_labels == 0\n    non_core_mask = ~(core_mask | anomalies_mask)\n\n    \n    cores = dbscan.components_\n    anomalies = X[anomalies_mask]\n    non_cores = X[non_core_mask]\n\n    # axes instance\n    fig = plt.figure(figsize=(6,6))\n    ax = Axes3D(fig, auto_add_to_figure=False)\n    fig.add_axes(ax)\n    ax.scatter(cores[:, 0], cores[:, 1], cores[:, 2],\n                c=bool_labels[core_mask], marker='o', s=size)\n    ax.scatter(cores[:, 0], cores[:, 1], cores[:, 2], marker='o', s=20,\n                c=bool_labels[core_mask])\n    ax.scatter(anomalies[:, 0], anomalies[:, 1], anomalies[:, 2],\n                c=\"r\", marker=\"x\", s=100)\n    ax.scatter(non_cores[:, 0], non_cores[:, 1], non_cores[:, 2],\n                c=bool_labels[non_core_mask], marker=\"o\")\n\n    plt.title(f\"eps={dbscan.eps:.2f}, min_samples={dbscan.min_samples}\")\n    plt.grid()\n    plt.gca().set_axisbelow(True)\n\ndbscan = DBSCAN(eps=epsilon)\ndbscan.fit(principalDf)\n\nplot_dbscan(dbscan, principalDf.to_numpy(), size=100)\n\n\n\n\n\n\nprincipalDf['labels'] = cluster.labels_ &gt; -1\n\n\nsns.pairplot(data=principalDf, hue='labels')\n\nc:\\Users\\Anu2001\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:123: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code. Testing Git Commit and push settings!\nprint(\"Trying to see how it gets rendered as code\")\nSeeing how images get rendered  # https://quarto.org/docs/authoring/figures.html figure layout documentation\nAdding latex equations to see how these get rendered \\[\ny = x\n\\]\nAdding links Link\n\nCan add bib file to quarto for referencing https://quarto.org/docs/authoring/footnotes-and-citations.html"
  }
]